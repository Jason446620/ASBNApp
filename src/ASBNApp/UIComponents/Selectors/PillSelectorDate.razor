@* 
Simple selector component for dates, shows today and tomorrow, as well as a date picker.
*@


<div class="row mx-0 justify-content-start">
    
    <div tabindex="0" class="col-auto me-2 mb-2 pill-selector-date @(Selected == "today" ? "active" : "")" 
        @onclick="@(e => { Selected = "today"; SelectedDate = DateTime.Today; SelectedDateChanged.InvokeAsync(SelectedDate); })" >

        <p class="m-0">Today (@Today.Date.ToString("dd.MM.yyyy"))</p>
    </div>

    <div tabindex="0" class="col-auto me-2 mb-2 pill-selector-date @(Selected == "tomorrow" ? "active" : "")" 
        @onclick="@(e => { Selected = "tomorrow"; SelectedDate = DateTime.Today.AddDays(1); SelectedDateChanged.InvokeAsync(SelectedDate); })">

        <p class="m-0">Tomorrow (@Tomorrow.Date.ToString("dd.MM.yyyy"))</p>
    </div>

    <div class="col-auto pill-selector-date me-2 mb-2 @(Selected == "customdate" ? "active" : "")">
            <label for="date">Pick day: </label>

            @* TODO: @onfocusout might not be the best option, try to find a better working one! *@
            @* simply use bind and add the methods from onfocusout??  *@
            <input type="date" id="date" @bind="SelectedDate" @onfocusout="@(e => { Selected = "customdate"; SelectedDateChanged.InvokeAsync(SelectedDate); })" />
    </div>

</div>

@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }
    [Parameter]
    public EventCallback<DateTime> SelectedDateChanged { get; set; }


    // Using this to force-update the SelecteDate in MainViewDay (couldn't get
    // existing values to load otherwise)
    protected override void OnInitialized()
    {
        SelectedDateChanged.InvokeAsync(DateTime.Today);
    }


    private DateTime Today = DateTime.Now;
    private DateTime Tomorrow = DateTime.Now.AddDays(1);
    // Used to control highlight styling
    private string Selected = "today";

}