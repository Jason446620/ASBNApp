@*
Main view to input and edit data, displayed when the user selects the weekly view.
Created 16.10.2023
*@

@inject IASBNDataService dataService

<div class="container-fluid mt-3 p-0">

    @* TODO: Create connection from here downwards to have the weeks date available here as well *@
    <WeekSelectorLarge @bind-SelectedWeek="SelectedWeek" @bind-SelectedYear="SelectedYear" OnCallback="Callback" />

    @* Iterate over the rows, write an <EntryRow /> for each, bind that value to the one here *@
    @if (SelectedYear != null && SelectedWeek != null)
    {
        @foreach (var entry in rowsList)
        {
            <EntryRow Entry="entry" SelectedWeek="SelectedWeek" SelectedYear="SelectedYear" />
        }
    }

    <div class="row justify-content-end">
        <div class="col-auto">
            <button class="btn btn-dark mt-4" type="submit" @onclick="SaveData">Save</button>
        </div>
    </div>

</div>



@code {
    // STUFF FOR EntryRows

    // Define the IEnumerable and List variables the fill with data
    IEnumerable<EntryRowModel>? rows;
    List<EntryRowModel>? rowsList;

    // Function to trigger a callback from the child component (and then do whatever is in this method)
    public async Task Callback()
    {
        GetDataFromWeekDates();
    }

    // Update the data we have from the data the (dummy) interface implementation returns
    // Will be called on initialization & once SelectedWeek or SelectedYear changes
    public async void GetDataFromWeekDates()
    {
        // Call DataService to get the values for the matching week / year
        rows = await dataService.GetWeek(SelectedYear, SelectedWeek);

        // Convert the IEnumerable to a list -> because we need to add entries
        // TODO: Check that this makes no sense (because we're converting from List to Enumerable before and then here to a List again??)
        rowsList = rows.ToList();

        // If no entries present, create 5 entries for the selected week
        if (rowsList.Count() == 0 && SelectedWeek != null && SelectedYear != null)
        {
            Console.WriteLine("rowsList = 0");
            // Get first date in the week
            var FirstDateInWeek = dateHandler.GetFirstDateOfWeek((int)SelectedWeek, (int)SelectedYear);
            Console.WriteLine(FirstDateInWeek);
            for (int i = 0; i < 5; i++)
            {
                rowsList.Add(new EntryRowModel()
                {
                    Date = FirstDateInWeek.AddDays(i),
                    Location = string.Empty,
                    Note = string.Empty
                });
            }
        }
    }


    // STUFF FOR WeekSelectorLarge

    // Creates DateHandler instance & variables to pass down to child component
    DateHandler dateHandler = new DateHandler();
    public int? SelectedWeek { get; set; }
    public int? SelectedYear { get; set; }


    private void SaveData()
    {
        dataService.SaveWeek(rowsList);

        // debug method to print what's saved in the variable rows
        Console.WriteLine("Week Nr: " + SelectedWeek + " Year " + SelectedYear);
        foreach (var entry in rowsList)
        {
            Console.WriteLine("Date: " + entry.Date.ToString() + "; Note: " + entry.Note + "; Location: " + entry.Location);
        }
    }
}