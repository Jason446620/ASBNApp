@*
Main view to input and edit data, displayed when the user selects the weekly view.
Created 16.10.2023
*@

@inject IASBNDataService dataService

<div class="container-fluid mt-3 p-0">

    @* TODO: Create connection from here downwards to have the weeks date available here as well *@
    <WeekSelectorLarge @bind-SelectedWeek="SelectedWeek" @bind-SelectedYear="SelectedYear" OnCallback="Callback" />

    @* Iterate over the rows, write an <EntryRow /> for each, bind that value to the one here *@
    @if (SelectedYear != null && SelectedWeek != null)
    {
        @foreach (var entry in rows)
        {
            <EntryRow Entry="entry" SelectedWeek="SelectedWeek" SelectedYear="SelectedYear" />
        }
    }

    <div class="row justify-content-end">
        <div class="col-auto">
            <button class="btn btn-dark mt-4" type="submit" @onclick="SaveData">Save</button>
        </div>
    </div>

</div>



@code {
    // STUFF FOR EntryRows

    // Define the IEnumerable variable the fill with data
    IEnumerable<EntryRowModel> rows;

    // Function to trigger a callback from the child component (and then do whatever is in this method)
    public async Task Callback()
    {
        GetDataFromWeekDates();
    }

    // Update the data we have from the data the (dummy) interface implementation returns
    // Will be called on initialization & once SelectedWeek or SelectedYear changes
    public void GetDataFromWeekDates()
    {
        // Call DataService to get the values for the matching week / year & assign to rows
        rows = dataService.GetWeek(SelectedYear, SelectedWeek);
    }


    // STUFF FOR WeekSelectorLarge

    // Creates DateHandler instance & variables to pass down to child component
    public int? SelectedWeek { get; set; }
    public int? SelectedYear { get; set; }

    // Save data
    private async void SaveData()
    {
        await dataService.SaveWeek(rows);
    }
}