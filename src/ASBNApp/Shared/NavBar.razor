@inject IFileSystemAccessService FileSystemAccessService;
@inject IASBNDataService dataService;
@inject IFileHandleManager fileHandleManager;

@using KristofferStrube.Blazor.FileSystem;


<nav class="navbar navbar-expand">
    <div class="container-fluid">

        <a class="navbar-brand" href=""><b>ASBN-App</b></a>
           
        <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
            <div class="navbar-nav">
                <NavLink class="nav-link nav-underline" href="" Match="NavLinkMatch.All">
                    <NavbarLink Title="Start" />
                </NavLink>

                <NavLink class="nav-link nav-underline" href="export">
                    <NavbarLink Title="Export" />
                </NavLink>
            </div>
        </div>

        <div>
            <button type="button" class="btn btn-outline-secondary" @onclick="OpenAndReadFile">Open File</button>
        </div>

        <span class="profile-icon p-2 ms-3">
            <NavLink class="nav-link" href="settings">
                <span class="material-symbols-outlined"> settings </span>
            </NavLink>
        </span>
    </div>
</nav>



@code {
    // Let the user pick a file through the OS file system and then add it to our FileHandleManager
    private async Task OpenAndReadFile()
    {
        try
        {
            // TODO: maybe consider to use `using` (https://learn.microsoft.com/de-de/dotnet/csharp/language-reference/statements/using)
            // TODO: Check if this is implemented correctly?
            var fileHandles = await FileSystemAccessService.ShowOpenFilePickerAsync();

            // The "using" block here makes sure we don't have a memory leak, because
            // "DisposeAsync" will be called at the end of the using scope.
            await using (var fileHandle = fileHandles.Single()) {
                if (fileHandle != null) {
                    fileHandleManager.AddFileHandle(fileHandle);
                }
                // await and process data being converted to JSON objects, was this as intended?
                await dataService.ReadData();
            }
        }
        catch (JSException ex)
        {
            // Handle Exception or cancelation of File Access prompt
            Console.WriteLine(ex);
        }
    }
}