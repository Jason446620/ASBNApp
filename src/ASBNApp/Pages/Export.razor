@page "/export"

@inject HttpClient Http
@inject FontServices fontServices;
@inject IASBNDataService dataService
@inject IFileSystemAccessService FileSystemAccessService;

@using PdfSharp.Fonts;
@using KristofferStrube.Blazor.FileSystem;


<PageTitle>Export</PageTitle>

<div class="container-fluid">
    <div class="row justify-content-between align-items-center">
        <div class="col-md-auto">
            <HeaderLarge Header="Let's get this exported!" />
            <i>Attention: As of right now, you need to manually sign these.</i>
        </div>
    </div>

    <div class="row mt-4">

        @* Left half, used for options *@
        <div class="col-6">
            <p>Select a week to export data for: </p>

            @* Create & add PillSelectorWeek here *@
            <PillSelectorWeek @bind-SelectedWeek="SelectedWeek" @bind-SelectedYear="SelectedYear" />

            <div class="row">
                <div class="col-auto">
                    <button class="btn btn-dark mt-4" type="submit" @onclick="ExportData">Export</button>
                </div>
            </div>
        </div>

        @* Right half, used for pdf preview (eventually) *@
        <div class="col-6">

        </div>

    </div>
</div>

@code {
    // Variables to bind to the child component
    public int? SelectedWeek { get; set; }
    public int? SelectedYear { get; set; }

    PermissionState writePermissionState;


    // as soon as we finished loading the page, get the required fonts
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender){
            Fonts font = await fontServices.LoadFonts();

            // Implement a custom font resolver (we do seem to need one, yes ^^)
            try
            {
                GlobalFontSettings.FontResolver = new CustomFontResolver(font);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }


    // Export PDF for the variables SelectedWeek & SeletedYear
    private async void ExportData()
    {
        // Get Data for the selected week
        // Might need it here later
        IEnumerable<EntryRowModel> rows = dataService.GetWeek(SelectedYear, SelectedWeek);

        // Export the PDF
        PDFExportHandler pdfHandler = new PDFExportHandler();

        // Open the pdf template file in a bytestream
        byte[] fileBytes = await Http.GetByteArrayAsync("pdf/Vorlage_ASBN.pdf");

        // get fileHandle for the output PDF
        FileSystemFileHandle? fileHandle = await FileSystemAccessService.ShowSaveFilePickerAsync();
        using (var outputStream = await fileHandle.CreateWritableAsync())
        {
            // required at all?
            // writePermissionState = await fileHandle.RequestPermissionAsync(new() {Mode = FileSystemPermissionMode.ReadWrite });

            // Hand over to the PDF handling class
            pdfHandler.GeneratePDF(fileBytes, outputStream, rows);

            // Close the stream and write file to disk
            outputStream.CloseAsync();
        }
    }
}